#map0 = affine_map<(d0) -> (d0)>
#map3 = affine_map<(d0) -> ()>
func.func @check_reordering() {
  %cst = arith.constant -0.000000e+00 : f32
  %0 = arith.constant dense<[
     1.2804, -0.581592, -1.71876, 1.15639, 0.672164, -1.60989, -0.833784, 1.00457,
     -0.74356, 1.31715, 1.48988, 0.872969, -0.0941162, 1.5581, 0.163723, 0.783328,
     -0.737997, 1.96507, 1.5307, 1.81025, -2.62472, -1.20089, 0.995187, -0.388828,
     -0.69852, 1.25512, -0.515252, 0.260225, -0.0887489, 0.321331, 0.983482, -0.938928,
     0.211903, 3.36977, -0.815014, -1.45991, -0.609059, -0.195272, 0.137056, -0.352047,
     -4.80246, -0.862131, 0.631228, -0.334029, 1.37299, -1.94476, 0.544184, 0.587235,
     -0.344279, -2.7832, -181.931, -0.254356, 1.44388, 0.207499, 0.700832, -0.771918,
     2.40769, 0.0489815, -0.348394, -1.88295, 0.477671, -1.82435, 0.850466, -2.00533,
     -3.02093, 2.45117, 0.891638, 1.44532, 1.16937, 1.86874, 0.27354, -0.0613082,
     0.454588, -0.181908, -0.230304, 1.28155, 1.1444, -0.28712, 0.59335, -1.4437,
     -0.464677, 2.53224, -1.84413, -0.0311428, -1.05765, 2.22488, -2.30576, -1.92434,
     -0.775903, -0.144793, 1.88057, 1.90912, 1.8819, 0.264619, 2.88462, 0.895932,
     1.12939, -0.176485, 0.00975764, 0.408196, 0.173489, -0.146982, 0.397728, 0.511359,
     -0.416689, -0.637274, 0.945013, 0.579828, 0.865281, 0.967137, -0.141736, -0.674403,
     -0.63958, 0.150314, -0.984788, -0.1152, 0.638724, 0.968143, 2.27088, 1.88768,
     -1.3065, 2.86541, -1.60142, 1.06462, -0.420429, 0.979998, 1.32695, 4.27789,
     -1.07685, -2.54966, 1.39267, -2.15306, 0.138251, 0.161464, -0.169319, -0.339778,
     1.09727, 1.0263, -0.975826, 2.62317, 0.10852, -0.19693, -0.298168, -1.22383,
     1.24453, 0.889357, -0.182928, -0.486876, 1.17305, -1.52553, -0.599288, -1.89198,
     0.118454, -0.253861, 2.48542, -0.275233, -2.02379, 0.172358, -0.628194, -0.531717,
     -0.701457, -1.43797, 1.77574, -1.1206, -0.407136, 0.158524, -0.477311, 0.635415,
     -0.475425, 0.694662, 2.65326, 0.27952, 1.57182, -1.78975, 0.424775, 1.82133,
     -0.850175, 0.263749, 2.60497, 0.0252105, -214.632, 0.87165, 0.472042, 0.76721,
     -0.365885, 0.355678, 1.05407, -0.148215, -0.308051, -0.272668, 0.015973, -0.768357,
     3.24001, -0.40346, -0.239586, 0.775097, 2.80553, 0.255948, 0.804333, -0.214983,
     -2.60668, 1.34015, 2.15137, 0.850974, -3.35236, -0.36659, 1.12084, -1.62359,
     0.744541, -0.727352, 1.25343, -2.38308, 2.16417, -0.976978, 0.0705537, 0.863583,
     -0.64167, -1.32317, 0.432879, 0.596956, -1.73316, -0.55461, -1.0321, 0.559003,
     -1.28841, 0.869509, -1.70148, 2.31796, 0.49086, -2.20974, 0.245908, -0.0716205,
     1.56631, -1.37562, -2.5209, 0.0435554, -0.247491, 0.0805165, 0.59833, 0.679752,
     1.73409, -1.56963, -1.49676, -0.0478282, -0.13865, 0.920942, 0.591466, -0.0992601,
     -2.02229, 2.38506, 1.41301, 0.274278, 2.21125, -3.74402, 0.733368, -0.671161,
     -0.601861, 2.0414, 0.309762, -0.0794785, 0.847502, 0.253761, -0.650413, -0.777582,
     -1.26148, 0.191393, -1.41566, 0.673126, -0.456589, -0.598648, 1.88949, 0.221135,
     -0.9765, -0.116049, 0.219927, 0.533694, 1.93134, 0.677495, 1.88102, -0.0233062,
     1.76926, -1.26563, -3.02296, 2.79105, 1.58564, 0.645035, 1.21422, 0.661965,
     -2.15309, 0.823196, 0.291843, 0.689657, 0.460279, 0.716908, -0.215368, -0.589341,
     2.02182, 0.536853, 0.608715, -1.45256, -1.18525, 0.263021, 0.688524, 0.745887,
     -1.14144, 0.81964, 2.64507, -0.680403, 1.23861, -0.378245, -1.33764, -1.2379,
     1.72673, 0.399239, -2.23062, -0.998948, 0.0655234, 3.17275, -2.67153, 1.71537,
     -0.286015, 1.13176, 0.203388, 1.10589, 2.76869, -0.403934, -0.214045, -0.0551621,
     0.717882, -1.3083, -0.795046, -1.38429, 0.580337, -0.224157, -17.2604, 0.836871,
     0.142011, 0.122061, 2.26528, -0.447681, -1.50412, 1.08898, -1.30101, 0.971848,
     -0.0927245, -0.785077, 0.475621, -0.436069, -1.94459, -0.292833, -1.69118, 1.38472,
     2.35704, 0.781228, 1.69324, 1.22189, 0.355634, -2.76349, -0.213877, -0.438733,
     0.924224, -1.32752, 2.63664, -0.487932, 0.153884, 0.652632, 1.27987, 0.830805,
     0.581549, 0.700341, 0.247854, 0.803821, -0.887014, -0.151061, 1.16038, -1.0655,
     2.32756, 1.00794, -1.34373, -0.102644, -0.672338, -1.08293, -1.56172, -0.993132]> : tensor<384xf32>
  %1 = util.unfoldable_constant dense<-0.395125> : tensor<f32>
  %2 = tensor.empty() : tensor<f32>
  %3 = linalg.fill ins(%cst : f32) outs(%2 : tensor<f32>) -> tensor<f32>
  %4 = linalg.generic {indexing_maps = [#map0, #map3, #map3], iterator_types = ["reduction"]}
    ins(%0, %1 : tensor<384xf32>, tensor<f32>) outs(%3 : tensor<f32>){
  ^bb0(%arg3: f32, %arg4: f32, %arg5: f32):
    %5 = arith.subf %arg3, %arg4 : f32
    %6 = arith.mulf %5, %5 : f32
    %7 = arith.addf %6, %arg5 : f32
    linalg.yield %7 : f32
  } -> tensor<f32>
  check.expect_almost_eq_const(%4, dense<79898.343750> : tensor<f32>) : tensor<f32>
  return
}
